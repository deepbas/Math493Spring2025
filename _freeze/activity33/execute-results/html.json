{
  "hash": "136c9cdd589a04dd6563d5403338ba8d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activity33\"\nformat: \n  live-html:\n    theme:\n      light: [lux, theme-light.scss]\n      dark: [superhero, theme-dark.scss] \nengine: knitr\ntoc: true\n---\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Ensemble Forecasting\n\nEnsemble forecasting combines predictions from multiple models to average out individual biases and reduce variance. This approach is particularly useful when data may exhibit regime uncertainty or when different models capture complementary features of the series.\n\n**Key Equation:**  \n\n$$\n\\begin{align}\n\\hat{y}_t^{Ensemble} &= \\frac{1}{m}\\sum_{i=1}^m \\hat{y}_t^{(i)}\n\\end{align}\n$$  \n\nwhere $m$ is the number of models.\n\n---\n\n## Australian Cement Production Example\n\nWe use the **aus_production** dataset focusing on Australian cement production. The code below loads the data, builds two models (ETS and ARIMA), and forms a simple average ensemble.\n\n\n\n::: {.cell}\n```{webr}\n# Load Australian cement production data\ncement <- aus_production %>%\n  dplyr::select(Quarter, Cement) %>%\n  as_tsibble(index = Quarter)\n\n# Build individual models and form an ensemble\ncement_ensemble <- cement %>% \n  model(\n    ETS = ETS(Cement),\n    ARIMA = fable::ARIMA(Cement)\n  ) %>%\n  mutate(Ensemble = (ETS + ARIMA) / 2)\n\n# Forecast for the next 4 years (16 quarters)\nfc_cement <- cement_ensemble %>% forecast(h = \"4 years\")\nfc_cement\n```\n:::\n\n\n\n---\n\n## Exploring Ensemble Forecasts with Simulations\n\nThe **generate()** function is useful for simulating multiple future scenarios (Monte Carlo simulations). This can help explore forecast uncertainty and the range of possible outcomes.\n\n\n\n::: {.cell}\n```{webr}\n# Generate 100 simulated future paths over the next 4 years\nsimulations <- cement_ensemble %>% \n  generate(h = \"4 years\", times = 100)\n\nsim_df <- as_tibble(simulations)\n\nforecast_plot <- ggplot() +\n  # 1. Future simulations colored by model\n  geom_line(\n    data = sim_df,\n    aes(x = Quarter, y = .sim, group = .rep, color = .model),\n    alpha = 0.6, linewidth = 0.5\n  ) +\n  scale_color_manual(\n    values = c(\"ETS\" = \"black\",  # Orange\n               \"ARIMA\" = \"red\", # Blue\n               \"Ensemble\" = \"green\"), # Green\n    name = \"Model Type\"\n  ) +\n  \n  # 2. Historical Data (Thick Black Line)\n  geom_line(\n    data = cement,\n    aes(x = Quarter, y = Cement),\n    color = \"black\", linewidth = 1.2\n  ) +\n  \n  # 3. Median Forecast (Dashed Red)\n  geom_line(\n    data = sim_df %>% \n      group_by(Quarter) %>% \n      summarise(Median = median(.sim)),\n    aes(x = Quarter, y = Median),\n    color = \"blue\", linetype = \"dashed\", linewidth = 1.2\n  ) +\n  \n  # 4. Legend positioning and theme\n  theme_minimal(base_size = 13) +\n  theme(\n    legend.position = \"top\",\n    legend.justification = \"center\",\n    legend.box.spacing = unit(0.2, \"cm\")\n  )\n\nforecast_plot\n\nforecast_start <- min(sim_df$Quarter)  # First forecast quarter\n\n\n# Final plot with zoom\nforecast_plot +\n  coord_cartesian(xlim = c(forecast_start - 16, forecast_start + 16)) +\n  labs(\n    title = \"Cement Production Forecasts by Model Type\",\n    subtitle = \"Black: Historical Data | Red Dashed: Overall Median Forecast\",\n    y = \"Production (Million Tonnes)\", x = \"Quarter\"\n  )\n\n```\n:::\n\n\n\n*Further Exploration Prompts:*  \n\n- Experiment with different ensemble weights (e.g., weighted average instead of simple average).  \n- Compare forecast accuracy using measures like MAE or CRPS by splitting your data into training and test sets.  \n- Use residual analysis (e.g., with `gg_tsresiduals()`) to check for model adequacy.\n\n---\n\n## Lab Activity: Sydney Tourism Ensemble Models\n\nThis guided activity explores forecasting for Sydney tourism using the **tourism** dataset. Follow these steps and review the prompts to deepen your understanding:\n\n1. **Data Preparation & Model Building:**  \n\n   Filter the tourism data for Sydney (holiday purpose) and build three models: two ETS variants and an ARIMA model.\n\n\n\n::: {.cell}\n```{webr}\nsydney <-  tourism %>%  \n dplyr::filter(Region == \"Sydney\", Purpose == \"Holiday\")\n\nsydney_models <- sydney %>%  \n model(  \n   ETS_ANA = ETS(Trips ~ error(\"A\") + trend(\"N\") + season(\"A\")),  \n   ETS_AAA = ETS(Trips ~ error(\"A\") + trend(\"A\") + season(\"A\")),  \n   ARIMA = fable::ARIMA(Trips)\n )\n```\n:::\n\n\n\n2. **Model Comparison:**  \n\n   Compare the information criteria (e.g., AICc, BIC) and residual variance to decide on the best model.\n\n\n\n\n\n::: {.cell}\n```{webr}\nmodel_stats <- glance(sydney_models) %>%  \n dplyr::select(.model, AICc, BIC, sigma2)\nmodel_stats\n```\n:::\n\n\n\n\n3. **Simulating Future Scenarios:**  \n\n   Use the **generate()** function to simulate 100 future paths over 12 months. Examine the range of forecasts.\n\n\n\n\n::: {.cell}\n```{webr}\nsimulations <- sydney_models %>% \n  generate(h = \"4 years\", times = 100)\n\nsim_df <- as_tibble(simulations)\n\nforecast_plot <- ggplot() +\n  # Future simulations (100 unique colors)\n  geom_line(\n    data = sim_df,\n    aes(x = Quarter, y = .sim, group = .rep, color = .rep),\n    alpha = 0.6, linewidth = 0.5\n  ) +\n  scale_color_viridis_d(\n    option = \"plasma\",  # Color palette\n    guide = \"none\"      # Hide legend for 100 colors\n  ) +\n  \n  # 2. Historical Data (Thick Black Line)\n  geom_line(\n    data = sydney,\n    aes(x = Quarter, y = Trips),\n    color = \"black\", linewidth = 1.2\n  ) +\n  \n  # 3. Median Forecast (Dashed Red)\n  geom_line(\n    data = sim_df %>% \n      group_by(Quarter) %>% \n      summarise(Median = median(.sim)),\n    aes(x = Quarter, y = Median),\n    color = \"red\", linetype = \"dashed\", linewidth = 1.2\n  )\n\n# 4. Smart Zoom Window\nforecast_start <- min(sim_df$Quarter)  # First forecast quarter\n\n\n# 5. Final Plot with Zoom\nforecast_plot +\n coord_cartesian(xlim = c(forecast_start - 16, forecast_start + 16)) +\n  labs(\n    title = \"Overnight Trips: Historical Context & 100 Forecast Paths\",\n    subtitle = \"Black: Historical Data | Red Dashed: Median Forecast\",\n    y = \"Trips (Thousands)\", x = \"Quarter\"\n  ) +\n  theme_minimal(base_size = 13)\n```\n:::\n\n\n\n*Further Exploration:*  \n\n- **Prompt 1:** How do the different model specifications (ETS_ANA vs. ETS_AAA) impact the forecast uncertainty?  \n\n\n\n::: {.cell}\n```{webr}\nsim_uncertainty <- simulations %>% as_tibble() %>% \n  group_by(.model) %>%\n  summarise(\n    sd = sd(.sim),\n    lower_95 = quantile(.sim, 0.025),\n    upper_95 = quantile(.sim, 0.975),\n    width = abs(upper_95 - lower_95)\n  )\nsim_uncertainty\n```\n:::\n\n\n\n\nThe **ETS_AAA** model (additive trend) shows wider forecast intervals than **ETS_ANA** (no trend) because trend uncertainty compounds over time. The ensemble averages these uncertainties, resulting in low variance. \n\n\n- **Prompt 2:** Try adjusting the forecast horizon or the number of simulation paths; what changes do you observe in the distribution of outcomes?  \n\n\n\n\n::: {.cell}\n```{webr}\n# simulate future scenarios\nsimulations <- sydney_models %>% \n  generate(h = \"16 years\", times = 500) # (future horizon, # Monte-Carlo Simulations)\n\nsim_df <- as_tibble(simulations)\n\nforecast_plot <- ggplot() +\n  # 1. Future simulations colored by model\n  geom_line(\n    data = sim_df,\n    aes(x = Quarter, y = .sim, group = .rep, color = .model),\n    alpha = 0.6, linewidth = 0.5\n  ) +\n  scale_color_manual(\n    values = c(\"ETS_ANA\" = \"black\",  # Orange\n               \"ARIMA\" = \"red\", # Blue\n               \"ETS_AAA\" = \"green\"), # Green\n    name = \"Model Type\"\n  ) +\n  \n  # 2. Historical Data (Thick Black Line)\n  geom_line(\n    data = sydney,\n    aes(x = Quarter, y = Trips),\n    color = \"black\", linewidth = 1.2\n  ) +\n  \n  # 3. Median Forecast (Dashed Red)\n  geom_line(\n    data = sim_df %>% \n      group_by(Quarter) %>% \n      summarise(Median = median(.sim)),\n    aes(x = Quarter, y = Median),\n    color = \"blue\", linetype = \"dashed\", linewidth = 1.2\n  ) +\n  \n  # 4. Legend positioning and theme\n  theme_minimal(base_size = 13) +\n  theme(\n    legend.position = \"top\",\n    legend.justification = \"center\",\n    legend.box.spacing = unit(0.2, \"cm\")\n  )\n\nforecast_plot\n\nforecast_start <- min(sim_df$Quarter)  # First forecast quarter\n\n\n# Final plot with zoom\nforecast_plot +\n  coord_cartesian(xlim = c(forecast_start - 16, forecast_start + 4*16)) +\n  labs(\n    title = \"Number of Trips Forecasts by Model Type\",\n    subtitle = \"Black: Historical Data | Red Dashed: Overall Median Forecast\",\n    y = \"Trips (in Thousands)\", x = \"Quarter\"\n  )\n```\n:::\n\n\n\n\n\nIncreasing the horizon amplifies divergence in simulated paths due to accumulating errors. More paths (e.g., `times = 500`) better approximate the forecast distribution but don’t fundamentally alter its spread. \n\n\n- **Prompt 3:** Experiment with combining models using different weights and compare the ensemble’s performance with that of individual models.  \n\n\n\n::: {.cell}\n```{webr}\ntrain <- sydney %>% filter(year(Quarter) < 2012)\ntest <- sydney %>% filter(year(Quarter) >= 2012)\n\nsydney_models <- train %>%  \n model(  \n   ETS_ANA = ETS(Trips ~ error(\"A\") + trend(\"N\") + season(\"A\")),  \n   ETS_AAA = ETS(Trips ~ error(\"A\") + trend(\"A\") + season(\"A\")),  \n   ARIMA = fable::ARIMA(Trips)\n ) %>% \n  mutate(ETS_WAVE = 0.6*ARIMA + 0.35*ETS_ANA + 0.05*ETS_AAA,\n         ETS_Ensemble = (ARIMA + ETS_ANA + ETS_AAA)/3)\n\nfc <- sydney_models %>% forecast(h = \"2 years\") \n\naccuracy_table <- fc %>% \n  accuracy(test, measures = list(\n    CRPS = CRPS,\n    MAE = MAE\n    )\n)\n\n# combined metrics\naccuracy_table %>% left_join(fc %>% accuracy(sydney)) %>% knitr::kable()\n```\n:::\n\n\n\n\n- **Prompt 4:** Perform a residual analysis on each model to detect potential structural breaks or model inadequacies.\n\n\n\n::: {.cell}\n```{webr}\ngg_tsresiduals(sydney_models %>% dplyr::select(ETS_ANA))\ngg_tsresiduals(sydney_models %>% dplyr::select(ETS_AAA))\ngg_tsresiduals(sydney_models %>% dplyr::select(ARIMA))\ngg_tsresiduals(sydney_models %>% dplyr::select(ETS_WAVE))\ngg_tsresiduals(sydney_models %>% dplyr::select(ETS_Ensemble))\n```\n:::\n\n\n\n## Need to check for:\n\n- Autocorrelation (significant spikes in ACF → poor fit)  \n- Non-normality (histogram skew → invalid prediction intervals)  \n- Heteroscedasticity (changing variance → consider transformations) \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}