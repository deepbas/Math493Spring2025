{
  "hash": "f3723f2400d2a33505656cce1b4917c4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activity11\"\nformat: live-html\nengine: knitr\ntoc: true\nwebr:\n  packages:\n    - dplyr\n    - ggplot2\n    - fpp3\n    - patchwork\n    - tsibbledata\n    - urca\n    - astsa\n    - gridExtra\nwarning: false\nmessage: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n## Residual Analysis in Time Series Modeling  \n\n**Core Concept**  \n\nResidual analysis is crucial for verifying model adequacy in time series. Residuals $e_t = y_t - \\hat{y}_t$ reveal violations of model assumptions (independence, homoscedasticity, normality). We demonstrate this through three domains, using the `glance()` function for model diagnostics, and discuss error modeling strategies when residuals aren’t white noise.\n\nResiduals are defined as the differences between the observed values and the corresponding fitted values:\n\n$$\n\\begin{align}\ne_t &= y_t - \\hat{y}_t,\n\\end{align}\n$$\n\nwhere $y_t$ is the observed value and $\\hat{y}_t$ is the predicted value at time $t$. Examining residuals helps assess model assumptions including independence, homoscedasticity, and normality.\n\n\n# Practical Implementations\n\n## 1. Finance Example: European Stock Markets\n\nWe utilize the built-in `EuStockMarkets` dataset to illustrate a Box-Cox transformation and residual analysis on financial data.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the EuStockMarkets dataset to a tsibble\nstock_tsibble <- as_tsibble(EuStockMarkets)\n\n# Use the DAX index for analysis and determine the optimal Box-Cox lambda\nstock_DAX <- stock_tsibble %>% \n  filter(key == \"DAX\") \n  \n\nlambda <- stock_DAX |>\n  features(value, features = guerrero) |>\n  pull(lambda_guerrero)\n\nstock_DAX_BC <- stock_DAX |>\n  mutate(BoxCoxValue = box_cox(value, lambda))\n\n\n# Fit a simple model with trend\nfit_finance <- stock_DAX_BC %>% \n  model(lm = TSLM(BoxCoxValue ~ trend()))\n\nfit_finance %>% tidy() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|key |.model |term        | estimate| std.error| statistic| p.value|\n|:---|:------|:-----------|--------:|---------:|---------:|-------:|\n|DAX |lm     |(Intercept) | 2.677081| 0.0003964| 6753.6546|       0|\n|DAX |lm     |trend()     | 0.000000| 0.0000000|  114.5636|       0|\n\n\n:::\n\n```{.r .cell-code}\nfit_finance %>% glance() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|key |.model | r_squared| adj_r_squared|   sigma2| statistic| p_value| df|  log_lik|       AIC|      AICc|       BIC|       CV|  deviance| df.residual| rank|\n|:---|:------|---------:|-------------:|--------:|---------:|-------:|--:|--------:|---------:|---------:|---------:|--------:|---------:|-----------:|----:|\n|DAX |lm     | 0.8759912|     0.8759245| 7.31e-05|  13124.81|       0|  2| 6218.707| -17709.87| -17709.85| -17693.28| 7.32e-05| 0.1358332|        1858|    2|\n\n\n:::\n\n```{.r .cell-code}\n# Residual analysis: Plot fitted vs residuals\nfit_finance %>% augment() %>%\n  ggplot(aes(x = .fitted, y = .resid)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", col = \"blue\", se = FALSE) +\n  labs(title = \"Residuals of DAX after Box-Cox Transformation\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n \n**Insight**: If residuals show unexplained structure, consider adding seasonal components or switching to ARIMA.\n\n## 2. Health Example: Electricity Demand in Victoria\n\nUsing the `vic_elec` dataset from the `Tidyverts` ecosystem, we fit a log-linear model to study the effect of temperature on electricity demand.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a log-linear model: log(Demand) as a function of Temperature\nfit_demand <- vic_elec %>% model(TSLM(log(Demand) ~ Temperature))\n\nfit_demand %>%  gg_tsresiduals() +\n  labs(title = \"Model Residuals\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfit_demand %>% tidy() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|.model                          |term        |  estimate| std.error|  statistic| p.value|\n|:-------------------------------|:-----------|---------:|---------:|----------:|-------:|\n|TSLM(log(Demand) ~ Temperature) |(Intercept) | 8.3034435| 0.0023852| 3481.30664|       0|\n|TSLM(log(Demand) ~ Temperature) |Temperature | 0.0078263| 0.0001385|   56.50756|       0|\n\n\n:::\n\n```{.r .cell-code}\nfit_demand %>% glance() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|.model                          | r_squared| adj_r_squared|    sigma2| statistic| p_value| df|  log_lik|       AIC|      AICc|       BIC|        CV| deviance| df.residual| rank|\n|:-------------------------------|---------:|-------------:|---------:|---------:|-------:|--:|--------:|---------:|---------:|---------:|---------:|--------:|-----------:|----:|\n|TSLM(log(Demand) ~ Temperature) |  0.057225|     0.0572071| 0.0323145|  3193.104|       0|  2| 15635.07| -180559.2| -180559.2| -180532.6| 0.0323162| 1699.938|       52606|    2|\n\n\n:::\n\n```{.r .cell-code}\n# Plot residuals against fitted values\nfit_demand %>% augment() %>%\n  ggplot(aes(x = .fitted, y = .resid)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", col = \"blue\", se = FALSE) +\n  labs(title = \"Residuals of Log-Linear Model for Electricity Demand\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fit a refined log-linear model with a quadratic term\nfit_demand_quad <- vic_elec %>% \n  model(TSLM(log(Demand) ~ Temperature + I(Temperature^2)))\n\nfit_demand_quad %>% gg_tsresiduals() +\n  labs(title = \"Model Residuals\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfit_demand_quad %>% tidy() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|.model                                             |term             |   estimate| std.error|  statistic| p.value|\n|:--------------------------------------------------|:----------------|----------:|---------:|----------:|-------:|\n|TSLM(log(Demand) ~ Temperature + I(Temperature^2)) |(Intercept)      |  8.6290530| 0.0052048| 1657.91105|       0|\n|TSLM(log(Demand) ~ Temperature + I(Temperature^2)) |Temperature      | -0.0312701| 0.0005771|  -54.18703|       0|\n|TSLM(log(Demand) ~ Temperature + I(Temperature^2)) |I(Temperature^2) |  0.0010463| 0.0000150|   69.60956|       0|\n\n\n:::\n\n```{.r .cell-code}\nfit_demand_quad %>% glance() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|.model                                             | r_squared| adj_r_squared|    sigma2| statistic| p_value| df|  log_lik|       AIC|      AICc|       BIC|        CV| deviance| df.residual| rank|\n|:--------------------------------------------------|---------:|-------------:|---------:|---------:|-------:|--:|--------:|---------:|---------:|---------:|---------:|--------:|-----------:|----:|\n|TSLM(log(Demand) ~ Temperature + I(Temperature^2)) | 0.1367406|     0.1367077| 0.0295896|  4166.324|       0|  3| 17952.78| -185192.6| -185192.6| -185157.1| 0.0295909| 1556.562|       52605|    3|\n\n\n:::\n\n```{.r .cell-code}\n# Residual analysis: Plot fitted vs residuals\nfit_demand_quad %>% augment() %>%\n  ggplot(aes(.fitted, .resid)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", col = \"blue\", se = FALSE) +\n  labs(title = \"Residuals of Log-Linear Model for Electricity Demand\",\n       x = \"Fitted Values\", y = \"Residuals\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n**Insight**: Even with better metrics, residual autocorrelation persists – this signals the need for SARIMA models.\n\n\n## 3. Environment Example: Air Quality Analysis\n\nThe built-in `airquality` dataset is used to analyze the relationship between temperature and ozone levels, followed by residual diagnostics.\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prepare the 'airquality' data with a proper date variable\nlibrary(stringr)\nairquality <- as_tibble(airquality) %>% \n  mutate(Date = lubridate::ymd(stringr::str_c(1973, Month, Day, sep = \"-\"))) %>%\n  arrange(Date) %>% \n  as_tsibble(index = Date)\n\n# Fit a linear model: Ozone as a function of Temperature\nfit_env <- airquality %>%  model(TSLM(Ozone ~ Temp))\n\nfit_env %>% tidy() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|.model             |term        |    estimate|  std.error| statistic| p.value|\n|:------------------|:-----------|-----------:|----------:|---------:|-------:|\n|TSLM(Ozone ~ Temp) |(Intercept) | -146.995491| 18.2871736| -8.038174|       0|\n|TSLM(Ozone ~ Temp) |Temp        |    2.428703|  0.2331318| 10.417724|       0|\n\n\n:::\n\n```{.r .cell-code}\nfit_env %>% glance() %>% knitr::kable()\n```\n\n::: {.cell-output-display}\n\n\n|.model             | r_squared| adj_r_squared|   sigma2| statistic| p_value| df|   log_lik|      AIC|     AICc|      BIC|       CV| deviance| df.residual| rank|\n|:------------------|---------:|-------------:|--------:|---------:|-------:|--:|---------:|--------:|--------:|--------:|--------:|--------:|-----------:|----:|\n|TSLM(Ozone ~ Temp) | 0.4877072|     0.4832134| 562.3675|   108.529|       0|  2| -530.8532| 738.5126| 738.7269| 746.7734| 568.4843| 64109.89|         114|    2|\n\n\n:::\n\n```{.r .cell-code}\n# Compute fitted values and residuals\nfit_env %>% augment() %>% \n  ggplot(aes(x = .fitted, y = .resid)) + \n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"loess\", col = \"blue\", se = FALSE) +\n  labs(title = \"Residuals of Ozone vs Temperature Model\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfit_env %>%   gg_tsresiduals() +\n  labs(title = \"Model Residuals\")\n```\n\n::: {.cell-output-display}\n![](activity11_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n# Lab Activities\n\n## Activity 1: Retail Sales Seasonality Analysis  \n\n**Prompt**  \n\nUsing the `aus_retail` dataset (Tidyverts), analyze the **\"Takeaway food services\"** sector in Victoria. \n\n1. Fit a model incorporating both **trend** and **monthly seasonality**  \n2. Perform residual analysis to assess model adequacy  \n3. Discuss whether seasonality improves the model  \n\n\n\n**Solution**  \n\n::: {.cell}\n```{webr}\n# Subset data and fit seasonal model  \nretail_model <- aus_retail %>%  \n  filter(Industry == \"Takeaway food services\", State == \"Victoria\") %>%  \n  model(TSLM(Turnover ~ trend() + season()))  \n\n# Residual diagnostics  \nretail_model %>%  \n  augment() %>%  \n  ggplot(aes(x = .fitted, y = .resid)) +  \n  geom_point(alpha = 0.5) +  \n  geom_hline(yintercept = 0, col = \"red\") +  \n  labs(title = \"Residuals vs Fitted: Takeaway Food Services Model\")  \n\nretail_model %>% gg_tsresiduals()  \n```\n:::\n\n**Key Insight**  \n\nThe `season()` term automatically creates **11 monthly dummy variables**. Compare residuals before/after adding seasonality using `glance()` metrics like AIC.  \n\n\n\n\n## Activity 2: Gasoline Production Transformation Study  \n\n**Prompt**  \n\nUsing the `gas` dataset (astsa):  \n\n1. Apply Box-Cox transformation with Guerrero's optimal $\\lambda$  \n2. Compare residuals against a **square root transformation** ($\\lambda=0.5$)  \n3. Identify which transformation better satisfies homoscedasticity  \n\n\n**Solution**  \n\n::: {.cell}\n```{webr}\n# Convert to tsibble and model  \ngas_ts <- as_tsibble(gas) %>% rename(Week = index, Production = value)  \n\nlambda_opt <- gas_ts %>% features(Production, guerrero) %>% pull(lambda_guerrero)  \n\nfit_opt <- gas_ts %>%  \n  mutate(Transformed = box_cox(Production, lambda_opt)) %>%  \n  model(TSLM(Transformed ~ trend()))  \n\nfit_sqrt <- gas_ts %>%  \n  mutate(Sqrt = sqrt(Production)) %>%  \n  model(TSLM(Sqrt ~ trend()))  \n\n# Residual comparison  \ngridExtra::grid.arrange(  \n  autoplot(fit_opt %>% augment(), .resid) + labs(title = \"Optimal Box-Cox\"),  \n  autoplot(fit_sqrt %>% augment(), .resid) + labs(title = \"Square Root\"),  \n  ncol = 1  \n)  \n```\n:::\n\n**Critical Check**  \n\nUse `glance(fit_opt)` vs `glance(fit_sqrt)` to compare **sigma** (residual SD) - lower values indicate better variance stabilization.  \n\n",
    "supporting": [
      "activity11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}