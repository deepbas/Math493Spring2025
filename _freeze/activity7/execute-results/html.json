{
  "hash": "a613bb29e6ad34c8a9d4a20a50f71d3f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Activity7\"\nformat: live-html\nengine: knitr\ntoc: true\nwebr:\n  packages:\n    - dplyr\n    - ggplot2\n    - fpp3\n    - patchwork\n    - tsibbledata\n    - urca\nwarning: false\nmessage: false\n---\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n:::\n\n\n## **Understanding Components, Decomposition, and Smoothing**\n\nTime series data often exhibit patterns that evolve over time. Three key components to recognize in many series are **trend**, **seasonality**, and **noise**. Understanding these components is crucial for forecasting and interpretation.\n\n1. **Trend**: Refers to the long-term progression of the series â€” an overall increase, decrease, or stable behavior over a period.\n2. **Seasonality**: Captures repeating patterns or cycles, such as higher sales every December or temperature variations across seasons.\n3. **Noise**: Represents random fluctuations or irregularities in the data that are not explained by trend or seasonality.\n\nMathematically, a time series $y_t$ can be represented as a combination of these components:\n\n- **Additive Model**:\n\n  $$\n  y_t = T_t + S_t + R_t\n  $$\n  where:\n  - $T_t$ is the trend component,\n  - $S_t$ is the seasonal component,\n  - $R_t$ is the remainder or residual (noise) component.\n\n- **Multiplicative Model**:\n\n  $$\n  y_t = T_t \\times S_t \\times R_t\n  $$\n  \n  This form is useful when seasonal fluctuations change proportionally to the series level.\n\n\n#### **Decomposition and Visualization**\n\nTo analyze these components, we can use decomposition methods such as **classical decomposition** or **STL (Seasonal-Trend decomposition using Loess)**. These methods separate a time series into its trend, seasonal, and remainder components, providing insights into underlying patterns.\n\n**Steps in Decomposition**:\n\n1. Fit an STL decomposition model to the series, specifying a seasonal window to capture recurring patterns.\n2. Extract the trend, seasonal, and remainder components.\n3. Plot the decomposed components:\n\n   - The observed series.\n   - The extracted trend component.\n   - The seasonal component, revealing periodic patterns.\n   - The remainder (residuals) after removing trend and seasonality.\n\nThese plots allow us to visually inspect how much of the variation in the data is due to trend, seasonal effects, or noise.\n\n#### **Smoothing Techniques**\n\nSmoothing helps to highlight the trend by reducing short-term fluctuations.\n\n1. **Moving Average Smoothing**:\n\n   - Each point is replaced by the average of its neighbors over a specified window.\n   - This technique smooths out short-term variations, making long-term trends more visible.\n\n2. **Exponential Smoothing**:\n\n   - Applies decreasing weights to older observations, making it responsive to recent changes.\n\n### Applied Example with Tidyverts Ecosystem\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Retrieve stock data using tq_get()\nstock_data <- tq_get(\"AAPL\", get = \"stock.prices\", from = \"2018-01-01\", to = \"2023-01-01\") %>%\n  select(date, adjusted) %>%\n  rename(Adjusted_Close = adjusted)\n\n# Convert to a tsibble object\nstock_ts <- as_tsibble(stock_data, index = date) %>% \n  fill_gaps() %>% \n  mutate(Adjusted_Close = na.approx(Adjusted_Close))\n  \n\n# Step 2: STL Decomposition\ndecomp <- stock_ts %>%\n  model(STL(Adjusted_Close ~ trend(window = 365) + season(window = \"periodic\"))) %>%\n  components()\n\n# Plot the decomposed components\nautoplot(decomp) +\n  labs(title = \"STL Decomposition of Apple Inc. Adjusted Closing Price\",\n       subtitle = \"Trend, Seasonal, and Remainder Components\")\n```\n\n::: {.cell-output-display}\n![](activity7_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Step 3: Smoothing Techniques\n# Moving Average Smoothing (30-day window)\nstock_ts <- stock_ts %>%\n  mutate(Moving_Avg = slider::slide_dbl(Adjusted_Close, mean, .before = 29, .after = 0))\n\n# Fit Holt's method using fable\nfit_holt <- stock_ts %>%\n  model(Holt = ETS(Adjusted_Close ~ error(\"A\") + trend(\"A\") + season(\"N\")))\n\n# Extract fitted values\nholt_fc <- fit_holt %>% \n  augment() %>% \n  select(date, .fitted)\n\n# Plot the original series, moving average\nstock_ts %>%\n  autoplot(Adjusted_Close, color = \"black\") +\n  autolayer(stock_ts, Moving_Avg, color = \"blue\") +\n  autolayer(holt_fc, .fitted, color = \"red\", linetype = \"dashed\") +\n  labs(title = \"Smoothing Techniques Applied to Apple Inc. Adjusted Closing Price\",\n       subtitle = \"Original Series (Black), 30-day MA (Blue), Holt's ES (Red)\",\n       y = \"Adjusted Close Price (USD)\") +\n  theme_tq()\n```\n\n::: {.cell-output-display}\n![](activity7_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n\n### Lab Activity:\n\nApply the concepts of time series decomposition and smoothing using the Tidyverts ecosystem in R. Use the stock data for **Microsoft Corporation (MSFT)** obtained via the `tidyquant` package. Perform the following tasks:\n\n1. **Decompose the time series** for Microsoft's adjusted closing price using STL decomposition. Visualize the trend, seasonal, and remainder components.\n2. **Apply smoothing techniques** (e.g., moving average or exponential smoothing) to the same series and compare the results.\n3. Interpret the components and smoothed series to identify trends, seasonality, and noise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step 1: Retrieve Microsoft stock data using tq_get()\nmsft_data <- tq_get(\"MSFT\", get = \"stock.prices\", from = \"2018-01-01\", to = \"2023-01-01\") %>%\n  select(date, adjusted) %>%\n  rename(Adjusted_Close = adjusted)\n\n# Convert to a tsibble object\nmsft_ts <- as_tsibble(msft_data, index = date) %>% \n  fill_gaps() %>% \n  mutate(Adjusted_Close = na.approx(Adjusted_Close))\n\n# Step 2: STL Decomposition\ndecomp <- msft_ts %>%\n  model(STL(Adjusted_Close ~ trend(window = 365) + season(window = \"periodic\"))) %>%\n  components()\n\n# Plot the decomposed components\nautoplot(decomp) +\n  labs(title = \"STL Decomposition of Microsoft Corporation Adjusted Closing Price\",\n       subtitle = \"Trend, Seasonal, and Remainder Components\",\n       y = \"Adjusted Close Price (USD)\")\n```\n\n::: {.cell-output-display}\n![](activity7_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# Step 3: Smoothing Techniques\n# Moving Average Smoothing (30-day window)\nmsft_ts <- msft_ts %>%\n  mutate(Moving_Avg = slider::slide_dbl(Adjusted_Close, mean, .before = 29, .after = 0))\n\n# Fit Holt's method using fable\nfit_holt <- msft_ts %>%\n  model(Holt = ETS(Adjusted_Close ~ error(\"A\") + trend(\"A\") + season(\"N\")))\n\n# Extract fitted values\nholt_fc <- fit_holt %>% \n  augment() %>% \n  select(date, .fitted)\n\n# Plot with Holt smoothing\nmsft_ts %>%\n  autoplot(Adjusted_Close, color = \"black\") +\n  autolayer(msft_ts, Moving_Avg, color = \"blue\") +\n  autolayer(holt_fc, .fitted, color = \"red\") +\n  labs(title = \"Smoothing Techniques Applied to Microsoft Corporation Adjusted Closing Price\",\n       subtitle = \"Original Series (Black), 30-day MA (Blue), Holt's ES (Red)\",\n       y = \"Adjusted Close Price (USD)\")\n```\n\n::: {.cell-output-display}\n![](activity7_files/figure-html/unnamed-chunk-4-2.png){width=672}\n:::\n:::\n\n",
    "supporting": [
      "activity7_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}